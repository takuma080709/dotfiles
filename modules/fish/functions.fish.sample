# write your settings!

####################
#       peco       #
####################
# function peco_z
#     set -l query (commandline)

#     if test -n $query
#         set peco_flags --query "$query"
#     end

#     z -l | peco $peco_flags --layout=bottom-up | awk '{ print $2 }' | read recent
#     if [ $recent ]
#         cd $recent
#         commandline -r ''
#         commandline -f repaint
#     end
# end

# function peco_ghq
#     set -l query (commandline)

#     if test -n $query
#         set peco_flags --query "$query"
#     end

#     ghq list --full-path | peco $peco_flags --layout=bottom-up | read recent
#     if [ $recent ]
#         cd $recent
#         commandline -r ''
#         commandline -f repaint
#     end
# end

# function fish_user_key_bindings
#     bind \cr 'peco_select_history (commandline -b)'
#     bind \co peco_ghq
#     bind \cw peco_z
# end

####################
#       ghq        #
####################
# function ghq_create
#     cd (ghq create (echo $argv)) | gh repo create (echo $argv) --public -y
#     echo "# "(echo $argv) >> README.md
#     git init
#     git add README.md
#     git commit -m "first commit"
#     git branch -M master
#     git remote add origin git@github.com:takuma080709/(echo $argv).git
#     git push -u origin master
# end

# function ghq_users
#     ghq list | grep "github.com" | cut -d / -f 2 | sort | uniq
# end

# function ghq_user_all
#     curl "https://api.github.com/users/"(echo $argv)"/repos" | jq -r ".[].clone_url" | xargs -L1 ghq get
# end

# function ghq_org_all
#     curl "takuma080709" "https://api.github.com/orgs/"(echo $argv)"/repos" | jq -r ".[].clone_url" | xargs -L1 ghq get
# end

# function ghq_remove
#     ghq list --full-path | peco | xargs -L1 rm -fr
# end

# function ghq_remove_user
#     ghq list | grep "github.com" | cut -d / -f 2 | sort | uniq | peco | read recent
#     ghq list --full-path | grep -E "/"(echo $recent)"/" | xargs -L1 rm -fr
# end

####################
#       tmux       #
####################
# function attach_tmux_session_if_needed
#     set ID (tmux list-sessions)
#     if test -z "$ID"
#         tmux new-session
#         return
#     end

#     set new_session "Create New Session"
#     set ID (string join \n (tmux list-sessions) $new_session | peco --on-cancel=error | cut -d: -f1)
#     if test "$ID" = "$new_session"
#         tmux new-session
#     else if test -n "$ID"
#         tmux attach-session -t "$ID"
#     end
# end

# if test -z $TMUX && status --is-login
#     attach_tmux_session_if_needed
# end
